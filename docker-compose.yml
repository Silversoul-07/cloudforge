version: '3.8'
services:
  postgres:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - my_network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - my_network
    
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    # restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
    networks:
      - my_network
    volumes:
      - ./backend:/app
    # healthcheck:
    #   test: curl --fail http://localhost:8000/health || exit 1
    #   interval: 2s
    #   timeout: 5s
    #   retries: 3
    #   start_period: 5s
        
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        FRONTEND_URL: ${FRONTEND_URL}
        BACKEND_URL: ${BACKEND_URL}
        MEDIA_URL: ${MEDIA_URL}
        NODE_ENV: ${NODE_ENV}
    depends_on:
      backend:
        condition: service_started
    ports:
      - "3000:3000"
    networks:
      - my_network
    volumes:
      - ./frontend:/app

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  my_network:
    driver: bridge